pipeline {
  agent {
    label 'AGENT-1'
  }
  options {
    timeout(time: 5, unit: 'MINUTES')
    disableConcurrentBuilds()
  }
  environment {
    DEBUG = 'true'
    //appversion = '' //this is global varible we can use any where inthe pipeline
    region = 'us-east-1'
    account_id = '688567303455'
    project = 'expense'
    environment = 'dev'
    component = 'frontend'
  }
  stages {
    stage('debug') {
      steps {
        echo 'debugging..'
        sh 'env'
      }
    }
    stage('Read The Version') {
      steps {
        script {
          def packageJson = readJSON file: 'Frontend/package.json'
          // appversion = packageJson.version
          // echo "App version: ${appversion}"
          env.appVersion = packageJson.version
          echo "App version: ${env.appVersion}"
        }
      }
    }
    stage('Docker Build'){
      steps {
        withAWS(region: 'us-east-1', credentials: 'aws-creds'){
          dir('Frontend'){
            sh """
              aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${account_id}.dkr.ecr.us-east-1.amazonaws.com
           
              docker build -t ${account_id}.dkr.ecr.us-east-1.amazonaws.com/${project}/${environment}/${component}:${appVersion} .
 
              docker images
 
              docker push ${account_id}.dkr.ecr.us-east-1.amazonaws.com/${project}/${environment}/${component}:${appVersion}
            """
          }
        }
      }
    }
    stage('Deploy'){
      steps {
        withAWS(region: 'us-east-1', credentials: 'aws-creds'){
          dir('Frontend/helm') {
            sh """
              aws eks update-kubeconfig --region ${region} --name ${project}-${environment}

              sed -i 's/IMAGE_VERSION/${appVersion}/g' values-${environment}.yaml

              helm upgrade --install ${component} -n ${project}-${environment} -f values-${environment}.yaml .
            """
          }
        }
      }
    }
  }
  post {
    always {
      echo 'This section always runs!'
      deleteDir() //in jenkins this function will delete the workspace directory of the job on the agent (VM/container)
    }
    success {
      echo 'This section runs when pipeline sucess'
    }
    failure {
      echo 'This section runs when pipeline failed' 
    }
  }
}